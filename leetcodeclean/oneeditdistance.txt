14. One Edit Distance
// edit distance
public int editDistance(String s, String t){
	if(s.isEmpty()) return t.length();
	else if(t.isEmpty()) return s.length();
	
	int[][] table = new int[s.length()][t.length()];
	for(int i = 0; i< s.length();i++)
		table[i][0] = i+1;                   //watch here. index i, not length i;
	for(int i = 0; i<t.length();i++){
		table[0][i] = i+1;
	}
	for(int i = 1;i <s.length();i++){
		for(int j=1;j<t.length();j++){
			int add = s.charAt(i) == t.charAt(j) ? 0:1;
			int min1 = table[i-1][j-1] +add;
			int min2 = Math.min(table[i-1][j],table[i][j-1])+1;
			table[i][j]=Math.min(min1,min2);
		}
	}
	return table[s.length()-1][t.length()-1];
}

// one edit distance; 
// naive method : calculate the edit distance.
// another method:
public boolean isOneEditDistance(String s, String t) {
	if(Math.abs(s.length()-t.length()) >1) return false;
	int len1 = s.length();
	int len2 = t.length();
	if(len1>len2) return isOneEditDistance(t,s);
	int i = 0;
	while(i<len1 && s.charAt(i) == t.charAt(i)) i++;
	if(len1 == len2){
		if (i == len1) return false;
		else return i==len1-1 || s.substring(i+1).equals(t.substring(i+1));
	} else{
		return i == len1 || s.substring(i).equals(t.substring(i+1));
	}
}














