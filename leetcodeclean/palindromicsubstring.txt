13. Longest Palindromic Substring
//DP
public int longestPalindrome(String s) {
	if(s.length()<2) return s.length();
	int len = s.length();
	boolean[][] flag = new boolean[len][len];
	int max = 1;
	for(int i=0;i<len;i++){
		flag[i][i] =true;
	}
	for(int i=0;i<len-1;i++){
		if(s.charAt(i) == s.charAt(i+1)){
			max = 2;
			flag[i][i+1] =true;
		}
	}
	for(int gap = 3;gap<=len;gap++){
		for(int i=0;i<len-gap;i++){
			if(flag[i+1][i+gap-2] && s.charAt(i) == s.charAt(i+gap-1)){
				flag[i][i+gap-1]=true;
				max = Math.max(max,gap);
			} else flag[i][i+gap-1] = false;		
		}
	}
	return max;
	
}


//DP
public String longestPalindrome(String s) {
	if(s.length()<2) return s;
	int len = s.length();
	boolean[][] flag = new boolean[len][len];
	int max = 1,in1=0,in2 = 0;
	for(int i=0;i<len;i++){
		flag[i][i] =true;
	}
	for(int i=0;i<len-1;i++){
		if(s.charAt(i) == s.charAt(i+1)){
			max = 2;
			flag[i][i+1] =true;
			in1 = i;
			in2 = i+1;
		}
	}
	for(int gap = 3;gap<=len;gap++){
		for(int i=0;i<len-gap;i++){
			if(flag[i+1][i+gap-2] && s.charAt(i) == s.charAt(i+gap-1)){
				flag[i][i+gap-1]=true;
				if(max < gap){
					in1=  i;
					in2 = i+gap-1;
				}

			} else flag[i][i+gap-1] = false;		
		}
	}
	return s.substring(in1,in2+1);
}

// focus on center.
public String longestPalindrome(String s) {
	if(s.length()<2) return s;
	int len = s.length();
	int max = 1,in1 = 0,in2 = 0;
	for(int i = 0;i<len;i++){
		for(int gap = 1;i-gap >=0 && i+gap<len;gap++){
			if(s.charAt(i-gap) == s.charAt(i+gap) ){
				break;
			} else if(max < 1+(gap-1)*2){
				max = 1+2*gap-2;
				in1 = i-gap;
				in2 = i+gap;
			}
		}
	}
	
	for(int i=0;i<len-1;i++){
		for(int gap = 1; i-gap+1>=0 && i+gap<len;gap++){
			if(s.charAt(i-gap+1) != s.charAt(i+gap)){
				break;
			}
			else if(max < gap*2){
				max = 2*gap;
				in1 = i-gap+1;
				in2 = i+gap;
			}
		}
	}
	return s.substring(in1,in2+1);

}

