5.Implement strstr()
// naive method
    public int strStr(String haystack, String needle) {
        //corner case
		if(needle.isEmpty()) return 0;
		else if(haystack.isEmpty()) return -1;
		else if(haystack.length() < needle.length()) return -1;
		
		for(int i=0;;i++){
			for(int j=0;;j++){
				if(j == needle.length()) return i;
				if(i+j == haystack.length()) return -1;
				if(haystack.charAt(i+1) != needle.charAt(j)) break;
			}
		}
    }
	
// KMP算法 next数组
    public int strStr(String haystack, String needle) {
		if(needle.isEmpty()) return 0;
		else if(haystack.isEmpty()) return -1;
		else if(haystack.length() < needle.length()) return -1;
		
		int[] next = partMatch(needle);
		for(int i=0;;){
			for(int j=0;;){
				if(j == needle.length()) return i;
				if(i+j == haystack.length()) return -1;
				if(haystack.charAt(i+j) == needle.charAt(j)){
					j++;
				} else{
					int step = j==0 ? 1: j- next[j-1];
					i +=step;
					j = j == 0? 1:next[j-1];
				}
			}
		}
	}
	
	private int[] partMatch(String needle){
		int[] next = new int[needle.length];
		for(int i=1;i<needle.length;i++){
			if(needle.charAt(next[i-1]) == needle.charAt(i)){\
				next[i] = next[i-1]+1;
			} else next[i] = next[i-1];
		}
		return next;
	}